<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>CryptoZombies front-end</title>
		<script language="javascript" type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script> 		
		<script language="javascript" type="text/javascript" src="web3.min.js"></script>
		<script language="javascript" type="text/javascript" src="cryptozombies_abi.js"></script>
	</head>
	<body>
		<div id="txStatus"></div>
		<!-- Set div with zombies IDs for the user, obtain them with displayZombies functions -->
		<div id="zombies"></div>

		<script>
			var cryptoZombies;
			var userAccount;
			//Let's call our cotract from the blockchain
			function startApp() {
				var cryptoZombiesAddress = "YOUR_CONTRACT_ADDRESS";
				cryptoZombies = new web3js.eth.Contract(cryptoZombiesABI, cryptoZombiesAddress);
				//Check if Metamask profile is still active or changed / logged off
				var accountInterval = setInterval(function() {
					if (web3.eth.accounts[0] !== userAccount) {
						userAccount = web3.eth.accounts[0];
						//Get IDs of zombies owned by user and then display it
						getZombiesByOwner(userAccount)
						.then(displayZombies);
					}
				}, 100);
				//Use `filter` to only fire this code when `_to` equals `userAccount`
				cryptoZombies.events.Transfer({ filter: {_to:userAccount} })
				.on("data", function(event) {
					let data = event.returnValues;
					  // The current user just received a zombie!
					  // Do something here to update the UI to show it
					 getZombiesByOwner(userAccount).then(displayZombies);
				}).on("error", console.error);
			}
			//In display function we get zombies details for each zombie and show them appending to current div
			function displayZombies(ids) {
				$("#zombies").empty();
				for (id of ids) {
					getZombieDetails(id)
					.then(function(zombie) {
						  $("#zombies").append(`<div class="zombie">
						    <ul>
						      <li>Name: ${zombie.name}</li>
						      <li>DNA: ${zombie.dna}</li>
						      <li>Level: ${zombie.level}</li>
						      <li>Wins: ${zombie.winCount}</li>
						      <li>Losses: ${zombie.lossCount}</li>
						      <li>Ready Time: ${zombie.readyTime}</li>
						    </ul>
						  </div>`);
					});
				}

			}

			function createRandomZombie(name) {
				//This is gonna take for a while so update the UI to let the user know what is happening (transaction sent)
				$("#txStatus").text("Creating new zombie on the blockchain. This may take a while...");
				//Send tx to our contract
				return cryptoZombies.methods.createRandomZombie(name)
				.send({ from: userAccount })
				.on("receipt", function(receipt) {
					$("#txStatus").text("Successfully created " + name + "!");
					//Transaction accepted, lets redraw our UI
					getZombiesByOwner(userAccount).then(displayZombies);
				})
				.on("error", function(error) {
					//Do smth to alert user that tx is failed
					$("#txStatus").text(error);
				})
			}

			function feedOnKitty(zombieId, kittyId) {
				$("#txStatus").text("Eating a kitty. This may take a while...");
				return cryptoZombies.methods.feedOnKitty(zombieId, kittyId)
				.send({ from: userAccount })
				.on("receipt", function(receipt) {
					$("#txStatus").text("Ate a kitty and spawned a new Zombie!");
					getZombiesByOwner(userAccount).then(displayZombies);
				})
				.on("error", function(error) {
					$("#txStatus").text(error);
				})
			}

			function levelUp(zombieId) {
				$("#txStatus").text("Leveling up your zombie...");
				return cryptoZombies.methods.levelUp(zombieId)
				.send({from:userAccount, value: web3js.utils.toWei("0.001", "ether")})
				.on("receipt", function(receipt) {
					$("#txStatus").text("Power overwhelming! Zombie successfully leveled up");
				})
				.on("error", function(error) {
					$("#txStatus").text(error);
				});
			}

			//When we create var which is public Solidity also creates "getter" function with same name
			//Let's create function to get zombie details from its id from the blockchain
			function getZombieDetails(id) {
				return cryptoZombies.methods.zombies(id).call()
			}

			function zombieToOwner(id) {
				return cryptoZombies.methods.zombieToOwner(id).call()
			}

			//Now we call function from zobiehelper.sol

			function getZombiesByOwner(owner) {
				return cryptoZombies.methods.getZombiesByOwner(owner).call()
			}

			window.addEventListener('load', function() {
				//Checking if Web3 has been injected by the browser (Mist/Metamask)
				if (typeof web3 !== 'undefined') {
					//Use Mist/Metamask provider
					web3js = new Web3(web3.currentProvider);
				} else {
					//Handle the case where user doesnt have Metamask installed
					//Probably show him a message prompting them to install Metamask
				}
				//Now you can start your app & access web3 freely
				startApp() 
			})
		</script>
	</body>
</html>
